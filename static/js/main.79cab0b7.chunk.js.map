{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","actualizarState","e","target","name","value","error","actualizarError","className","onSubmit","preventDefault","trim","console","log","id","uuid","type","palceholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevaCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79cab0b7.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\r\nimport uuid from 'uuid/dist/v4';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n    ///////////////////////////////////////////////////////////////////////////////////\r\n    ///////////////////////////////////////////////////////////////////////////////////\r\n    ///////////////////////////////////////////////////////////////////////////////////\r\n    //Crear State de Citas\r\n    //cita: va a tener toda la infomacion del STATE y actilzarCita va a modificar ese STATE\r\n    //el useState es un objeto porque en el vamos agregar todo los campos que tenemos\r\n    const [cita, actualizarCita] = useState({    \r\n        mascota : '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    });\r\n    //Funcion que se ejecuta cada vez que el usuario escribe el INPUT\r\n    const actualizarState = e =>{\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////\r\n    ///////////////////////////////////////////////////////////////////////////////////\r\n    ///////////////////////////////////////////////////////////////////////////////////\r\n\r\n    //Segundo STATE para los ERRORES\r\n    const[error, actualizarError] = useState(false);\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////\r\n    ///////////////////////////////////////////////////////////////////////////////////\r\n    ///////////////////////////////////////////////////////////////////////////////////\r\n\r\n    //Extraer valores\r\n    const {mascota, propietario, fecha, hora, sintomas} = cita;\r\n\r\n    //Cuando el usuario aprieta \"agregar cita\"\r\n    const submitCita = (e) =>{\r\n        e.preventDefault();\r\n\r\n        //Validar\r\n        if(mascota.trim() === \"\" || propietario.trim() === \"\" || fecha.trim() === \"\" || hora.trim() === \"\" || sintomas.trim() === \"\"){\r\n           actualizarError(true);\r\n            return;\r\n        }\r\n        actualizarError(false);\r\n\r\n        console.log('agregando...');\r\n\r\n        //Asignar un ID\r\n        cita.id = uuid();\r\n\r\n        //Crear la CITA\r\n        crearCita(cita);\r\n\r\n        //Reiniciar el FORM\r\n        actualizarCita({\r\n            mascota : '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        })\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n\r\n            {error ? <p className=\"alerta-error\">Todos los campos son obligatorios.</p> : null}\r\n\r\n            <form onSubmit={submitCita}>\r\n                <label>Nombre Mascota</label>\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"mascota\" \r\n                    className=\"u-full-width\" \r\n                    palceholder=\"Nombre Mascota\" \r\n                    onChange={actualizarState} \r\n                    value={mascota} \r\n                />\r\n\r\n                <label>Nombre Dueño</label>\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\" \r\n                    palceholder=\"Nombre Duseño de la Mascota\" \r\n                    onChange={actualizarState} \r\n                    value={propietario}\r\n                />\r\n\r\n                <label>Fecha</label>\r\n                <input \r\n                    type=\"date\" \r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\" \r\n                    onChange={actualizarState} \r\n                    value={fecha}\r\n                />\r\n\r\n                <label>Hola</label>\r\n                <input \r\n                    type=\"time\" \r\n                    name=\"hora\" \r\n                    className=\"u-full-width\" \r\n                    onChange={actualizarState}\r\n                    value={hora}\r\n                />\r\n\r\n                <label>Síntomas</label>\r\n                <textarea \r\n                    className=\"u-full-width\" \r\n                    name=\"sintomas\" \r\n                    onChange={actualizarState} \r\n                    value={sintomas}\r\n                ></textarea>\r\n\r\n                <button type=\"submit\" className=\"u-full-width button-primary\">Agragar Cita</button>\r\n                \r\n            </form>\r\n        </Fragment>\r\n     );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) => (\r\n    <div className=\"cita\">\r\n        <p>Mascota: <span>{cita.mascota}</span> </p>\r\n        <p>Dueño: <span>{cita.propietario}</span> </p>\r\n        <p>Fecha: <span>{cita.fecha}</span> </p>\r\n        <p>Hora: <span>{cita.hora}</span> </p>\r\n        <p>Sintomas: <span>{cita.sintomas }</span> </p>\r\n\r\n        <button\r\n            className = \"button eliminar u-full-width\"\r\n            onClick = { () => {eliminarCita(cita.id)} }\r\n        >Eliminar &times;</button>\r\n    </div>\r\n  );\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/Formulario.js';\nimport Cita from './components/Cita.js';\n\nfunction App() {\n\n  // Citas en LocalStorage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas')); \n  if(!citasIniciales){\n    citasIniciales = [];\n  }\n  \n\n  // Arreglo de todas las citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  // useEffect para realizar ciertas operaciones cuando el state cambie\n  useEffect( () => {\n      if(citasIniciales){\n        localStorage.setItem('citas', JSON.stringify(citas));\n      }else{\n        localStorage.setItem('citas', JSON.stringify([]));\n      }\n  }, [citas, citasIniciales] ) //PASAMOS \"CITAS INICIALES\" PORQUE NOS TIRABA UN  WARNING EN CONSOLA. pERO ES LO MISMO QUE NO LO PONGAMOS\n\n\n  //Funcion que tome las citas actuales y agregue la nueva\n  const crearCita = cita =>{\n    guardarCitas([\n      ...citas,\n      cita\n    ]);\n  }\n\n  // Funcion que elimina un cita por su ID\n  const eliminarCita = (id) => {\n    const nuevaCitas = citas.filter(cita => cita.id !== id);\n    guardarCitas(nuevaCitas);\n  }\n\n  //Mensaje Condicional\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus Citas';\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario \n              crearCita = {crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n              <h2>{titulo}</h2>\n              {citas.map(cita => (\n                <Cita\n                  cita = {cita}\n                  key = {cita.id}\n                  eliminarCita = {eliminarCita}\n                />\n              ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}